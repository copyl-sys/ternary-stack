@* gaia_graph_pipeline.cweb
This document demonstrates the integration of a GPU-accelerated graph pipeline within Hanoivm.
It includes an expanded internal graph structure and additional utility functions for:
- Graph creation and printing.
- Converting alternative internal graph representations into the hvm_graph format.
- Profiling the GPU execution.
- Running the GPU graph pipeline.

Recommendations:
1. **Interface Integration:**  
   Use the conversion functions to adapt Hanoivm's native graph data into the hvm_graph format.
2. **Profiling & Debugging:**  
   Use the profiling function to capture execution time and the print function for debugging.
3. **Modular Design:**  
   The functions encapsulate GPU execution details from higher-level Hanoivm logic, allowing for future expansion.
4. **Future Expansion:**  
   Enhance the conversion functions as Hanoivm's internal representations evolve to support more complex graph structures.

@c
#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>

@* Define error checking macro.
This macro wraps CUDA API calls to catch and report errors.
@c
@<Error Checking Macros@>=
#define CUDA_CALL(call)                                     \
    do {                                                    \
        cudaError_t err = (call);                           \
        if (err != cudaSuccess) {                           \
            fprintf(stderr, "CUDA error at %s:%d: %s\n",    \
                    __FILE__, __LINE__, cudaGetErrorString(err)); \
            exit(EXIT_FAILURE);                             \
        }                                                   \
    } while (0)
@*

@* Kernel Function.
This kernel computes the degree for each vertex in the provided edge list.
Each edge is represented as a pair (u, v) and degrees are updated using atomic operations.
@c
__global__ void computeDegrees(int *edges, int numEdges, int *degrees) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < numEdges) {
        int u = edges[2 * idx];
        int v = edges[2 * idx + 1];
        // Increment degree for vertex u.
        atomicAdd(&degrees[u], 1);
        // For non-self-loop edges, increment degree for vertex v.
        if (u != v) {
            atomicAdd(&degrees[v], 1);
        }
    }
}

@* Internal Hanoivm Graph Structure.
This structure represents a graph as used within Hanoivm.
It includes the number of vertices, number of edges, and an edge list.
@c
typedef struct {
    int numVertices;
    int numEdges;
    int *edges; // Array of edges; each edge consists of two integers.
} hvm_graph;

@* create_hvm_graph.
Dynamically allocates and initializes an hvm_graph with the given parameters.
Note: The edge list is copied from the provided array.
@c
hvm_graph *create_hvm_graph(int numVertices, int numEdges, const int *edgeArray) {
    hvm_graph *graph = (hvm_graph *)malloc(sizeof(hvm_graph));
    if (!graph) {
        fprintf(stderr, "Error allocating hvm_graph structure.\n");
        exit(EXIT_FAILURE);
    }
    graph->numVertices = numVertices;
    graph->numEdges = numEdges;
    graph->edges = (int *)malloc(numEdges * 2 * sizeof(int));
    if (!graph->edges) {
        fprintf(stderr, "Error allocating edge array.\n");
        free(graph);
        exit(EXIT_FAILURE);
    }
    for (int i = 0; i < numEdges * 2; i++) {
        graph->edges[i] = edgeArray[i];
    }
    return graph;
}

@* free_hvm_graph.
Frees the memory allocated for an hvm_graph.
@c
void free_hvm_graph(hvm_graph *graph) {
    if (graph) {
        if (graph->edges)
            free(graph->edges);
        free(graph);
    }
}

@* print_hvm_graph.
Prints the graph details for debugging purposes.
@c
void print_hvm_graph(const hvm_graph *graph) {
    printf("Graph: %d vertices, %d edges\n", graph->numVertices, graph->numEdges);
    for (int i = 0; i < graph->numEdges; i++) {
        printf("Edge %d: (%d, %d)\n", i, graph->edges[2*i], graph->edges[2*i+1]);
    }
}

@* --- Conversion Functions --- 
These functions convert alternative internal graph representations to the hvm_graph format.
For demonstration, we assume an internal graph is represented as follows:
@c
typedef struct {
    int numVertices;
    int numEdges;
    struct {
        int u;
        int v;
    } *edgeArray; // Each edge stored as a structure with fields u and v.
} internal_graph;

@* convert_internal_to_hvm.
Converts an internal_graph to an hvm_graph.
@c
hvm_graph *convert_internal_to_hvm(const internal_graph *intGraph) {
    // Allocate hvm_graph using the number of vertices and edges from the internal graph.
    int totalEdges = intGraph->numEdges;
    // Allocate temporary edge array.
    int *tempEdges = (int *)malloc(totalEdges * 2 * sizeof(int));
    if (!tempEdges) {
        fprintf(stderr, "Error allocating temporary edge array.\n");
        exit(EXIT_FAILURE);
    }
    // Convert each internal edge structure into two integers.
    for (int i = 0; i < totalEdges; i++) {
        tempEdges[2 * i] = intGraph->edgeArray[i].u;
        tempEdges[2 * i + 1] = intGraph->edgeArray[i].v;
    }
    // Create an hvm_graph using the converted edge list.
    hvm_graph *graph = create_hvm_graph(intGraph->numVertices, totalEdges, tempEdges);
    free(tempEdges);
    return graph;
}

@* --- End Conversion Functions ---

@* profile_gaia_graph_pipeline.
Profiles the execution of the GPU graph pipeline by measuring the time taken to run the pipeline.
It uses CUDA events for high-resolution timing.
@c
float profile_gaia_graph_pipeline(const hvm_graph *graph, int *vertex_degrees) {
    cudaEvent_t start, stop;
    CUDA_CALL(cudaEventCreate(&start));
    CUDA_CALL(cudaEventCreate(&stop));

    CUDA_CALL(cudaEventRecord(start, 0));
    {
        int *d_edges, *d_degrees;
        size_t edgesSize = graph->numEdges * 2 * sizeof(int);
        size_t degreesSize = graph->numVertices * sizeof(int);

        CUDA_CALL(cudaMalloc((void**)&d_edges, edgesSize));
        CUDA_CALL(cudaMalloc((void**)&d_degrees, degreesSize));

        CUDA_CALL(cudaMemcpy(d_edges, graph->edges, edgesSize, cudaMemcpyHostToDevice));
        CUDA_CALL(cudaMemset(d_degrees, 0, degreesSize));

        int threadsPerBlock = 256;
        int blocks = (graph->numEdges + threadsPerBlock - 1) / threadsPerBlock;
        computeDegrees<<<blocks, threadsPerBlock>>>(d_edges, graph->numEdges, d_degrees);
        CUDA_CALL(cudaGetLastError());
        CUDA_CALL(cudaDeviceSynchronize());

        CUDA_CALL(cudaMemcpy(vertex_degrees, d_degrees, degreesSize, cudaMemcpyDeviceToHost));

        CUDA_CALL(cudaFree(d_edges));
        CUDA_CALL(cudaFree(d_degrees));
    }
    CUDA_CALL(cudaEventRecord(stop, 0));
    CUDA_CALL(cudaEventSynchronize(stop));

    float elapsedTime;
    CUDA_CALL(cudaEventElapsedTime(&elapsedTime, start, stop));
    CUDA_CALL(cudaEventDestroy(start));
    CUDA_CALL(cudaEventDestroy(stop));
    return elapsedTime;
}

@* run_gaia_graph_pipeline.
A wrapper function that executes the GPU graph pipeline using the provided hvm_graph.
It populates the vertex_degrees array with the computed degrees.
@c
void run_gaia_graph_pipeline(const hvm_graph *graph, int *vertex_degrees) {
    int *d_edges, *d_degrees;
    size_t edgesSize = graph->numEdges * 2 * sizeof(int);
    size_t degreesSize = graph->numVertices * sizeof(int);

    CUDA_CALL(cudaMalloc((void**)&d_edges, edgesSize));
    CUDA_CALL(cudaMalloc((void**)&d_degrees, degreesSize));

    CUDA_CALL(cudaMemcpy(d_edges, graph->edges, edgesSize, cudaMemcpyHostToDevice));
    CUDA_CALL(cudaMemset(d_degrees, 0, degreesSize));

    int threadsPerBlock = 256;
    int blocks = (graph->numEdges + threadsPerBlock - 1) / threadsPerBlock;
    computeDegrees<<<blocks, threadsPerBlock>>>(d_edges, graph->numEdges, d_degrees);
    CUDA_CALL(cudaGetLastError());
    CUDA_CALL(cudaDeviceSynchronize());

    CUDA_CALL(cudaMemcpy(vertex_degrees, d_degrees, degreesSize, cudaMemcpyDeviceToHost));

    CUDA_CALL(cudaFree(d_edges));
    CUDA_CALL(cudaFree(d_degrees));
}

@* Main Function.
Demonstrates integration by:
- Creating a sample hvm_graph.
- Converting an alternative internal graph to hvm_graph.
- Printing graph details.
- Running and profiling the GPU graph pipeline.
@c
int main(void) {
    // Sample graph using an edge array representation.
    int sample_edges[] = {
        0, 1,  // Edge from vertex 0 to vertex 1.
        0, 2,  // Edge from vertex 0 to vertex 2.
        1, 2,  // Edge from vertex 1 to vertex 2.
        1, 3,  // Edge from vertex 1 to vertex 3.
        2, 3,  // Edge from vertex 2 to vertex 3.
        3, 4   // Edge from vertex 3 to vertex 4.
    };

    // Create the hvm_graph using the dynamic allocation function.
    hvm_graph *sample_graph = create_hvm_graph(5, 6, sample_edges);
    print_hvm_graph(sample_graph);

    // Simulate an alternative internal graph representation.
    typedef struct {
        int u;
        int v;
    } edge_t;
    typedef struct {
        int numVertices;
        int numEdges;
        edge_t *edgeArray;
    } internal_graph;
    
    // Create a sample internal_graph.
    edge_t internal_edges[] = {
        {0, 1}, {0, 2}, {1, 2}, {1, 3}, {2, 3}, {3, 4}
    };
    internal_graph intGraph;
    intGraph.numVertices = 5;
    intGraph.numEdges = 6;
    intGraph.edgeArray = internal_edges;
    
    // Convert the internal_graph to an hvm_graph.
    hvm_graph *converted_graph = convert_internal_to_hvm(&intGraph);
    printf("\nConverted internal_graph to hvm_graph:\n");
    print_hvm_graph(converted_graph);

    // Allocate memory for vertex degrees.
    int *vertex_degrees = (int *)malloc(sample_graph->numVertices * sizeof(int));
    if (!vertex_degrees) {
        fprintf(stderr, "Error allocating vertex degrees array.\n");
        free_hvm_graph(sample_graph);
        free_hvm_graph(converted_graph);
        exit(EXIT_FAILURE);
    }

    // Run the GPU graph pipeline on the sample graph.
    run_gaia_graph_pipeline(sample_graph, vertex_degrees);
    printf("\nVertex degrees (without profiling) on sample_graph:\n");
    for (int i = 0; i < sample_graph->numVertices; i++) {
        printf("Vertex %d: %d\n", i, vertex_degrees[i]);
    }

    // Profile the GPU graph pipeline.
    for (int i = 0; i < sample_graph->numVertices; i++) {
        vertex_degrees[i] = 0;
    }
    float elapsedTime = profile_gaia_graph_pipeline(sample_graph, vertex_degrees);
    printf("\nGPU graph pipeline execution time: %.3f ms\n", elapsedTime);
    printf("Vertex degrees (after profiling) on sample_graph:\n");
    for (int i = 0; i < sample_graph->numVertices; i++) {
        printf("Vertex %d: %d\n", i, vertex_degrees[i]);
    }

    // Cleanup.
    free(vertex_degrees);
    free_hvm_graph(sample_graph);
    free_hvm_graph(converted_graph);

    return 0;
}

name: HanoiVM CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  build:
    name: 🔨 Build HanoiVM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-17 llvm-17-dev clang-17 lld-17 cmake ninja-build

      - name: 📚 Setup .cweb Tooling
        run: |
          sudo apt-get install -y cweb texlive-full
          chmod +x ./tangle-all.sh
          ./tangle-all.sh

      - name: 🔄 Compile LLVM Backend
        run: |
          set -e
          mkdir -p build && cd build
          cmake -G Ninja .. -DLLVM_DIR=/usr/lib/llvm-17/lib/cmake/llvm
          ninja

      - name: 🔍 Run Unit Tests
        run: |
          cd build
          ninja check-all

      - name: 📊 Generate Benchmarks
        run: |
          ./hvmcli benchmark > HanoiVM_Runtime_Timeline.csv

      - name: 📦 Package Artifacts
        run: |
          zip -r HanoiVM-Release-v0.9.zip build/bin *.cwebpkg *.hvm *.t81 *.log *.json *.viz

      - name: 📤 Upload Build + Logs
        uses: actions/upload-artifact@v4
        with:
          name: HanoiVM-v0.9
          path: |
            HanoiVM-Release-v0.9.zip
            HanoiVM_Runtime_Timeline.csv

  gpu-cuda:
    name: ⚙️ CUDA Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Install CUDA
        run: |
          sudo apt-get install -y nvidia-cuda-toolkit
          nvcc --version

      - name: 🔄 Compile CUDA Backend
        run: |
          set -e
          nvcc cuda_handle_request.cu -o cuda_backend

      - name: 🧪 Run CUDA Tests
        run: ./cuda_backend --test

  gpu-rocm:
    name: ⚙️ ROCm Backend (GAIA)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Install ROCm
        run: |
          sudo apt-get install -y rocm-dev rocm-libs
          clang++ --version

      - name: 🔄 Compile GAIA Backend
        run: |
          clang++ gaia_handle_request.cweb -o gaia_backend -lhip_hcc

      - name: 🧪 Run GAIA Tests
        run: ./gaia_backend --test

  docs:
    name: 📚 Generate Literate Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 📘 Extract + Compile Docs
        run: |
          chmod +x ./tangle-all.sh
          ./tangle-all.sh
          find . -name "*.cweb" -exec cweave {} \;
          find . -name "*.tex" -exec pdftex {} \;

      - name: 📂 Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: HanoiVM-Docs-v0.9
          path: |
            ./**/*.pdf

  # Caching Dependencies for Faster Builds
  cache-dependencies:
    name: 💾 Cache Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔄 Cache LLVM and other dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/llvm-17
          key: ${{ runner.os }}-llvm-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-llvm-

  # Matrix Builds for Parallel Testing
  test-matrix:
    name: 🧪 Test Across Environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        llvm: [17, 18] # Example of testing multiple LLVM versions
        python: [3.8, 3.9] # Example of testing multiple Python versions
    steps:
      - uses: actions/checkout@v4

      - name: ⚙️ Setup LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-${{ matrix.llvm }} llvm-${{ matrix.llvm }}-dev clang-${{ matrix.llvm }} lld-${{ matrix.llvm }} cmake ninja-build

      - name: 🧪 Run Unit Tests for Matrix Environment
        run: |
          cd build
          ninja check-all

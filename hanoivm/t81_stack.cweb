@* t81_stack.cweb | Stack Management for HanoiVM with T81Number Support
This module defines the full implementation of the T81 stack using `T81Number` from `libt81.cweb` for symbolic Base-81 arithmetic.

Included Features:
- Stack memory for up to 3^7 (2187) `T81Number` values.
- Safe core operations: `push81`, `pop81`, `peek81`.
- Arithmetic operations using libt81: `add81`, `mod81`, `neg81`.
- Conditional operation: `ifz81` (if zero).
- Stack control: `dup81`, `swap81`, `drop81`.
- Integrated with Axion AI logging.

@<Include Dependencies@>=
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "config.h"
#include "ai_hook.h"
#include "hvm_loader.h"
#include "libt81.h"
#include "libt243.h"
#include "libt729.h"
@#

#define STACK_UNDERFLOW_ERR -2

@* Stack State Structure@<=
static T81Number t81_stack[T81_STACK_SIZE];
static int t81_sp = -1;
@#

@* Stack API Declarations@<=
void push81(T81Number value);
T81Number pop81(void);
T81Number peek81(void);

void add81(void);
void mod81(void);
void neg81(void);

bool ifz81(void);

void dup81(void);
void swap81(void);
void drop81(void);
@#

@* T81 Stack Core Functions@<=
void push81(T81Number value) {
    if (t81_sp >= T81_STACK_SIZE - 1) {
        fprintf(stderr, "[T81] Stack overflow!\n");
        axion_log("[T81 Error] Stack overflow during push operation");
        exit(STACK_OVERFLOW_ERR);
    }
    t81_stack[++t81_sp] = value;
    axion_log("[Stack Push] Value pushed to stack");
}

T81Number pop81(void) {
    if (t81_sp < 0) {
        fprintf(stderr, "[T81] Stack underflow!\n");
        axion_log("[T81 Error] Stack underflow during pop operation");
        exit(STACK_UNDERFLOW_ERR);
    }
    T81Number value = t81_stack[t81_sp--];
    axion_log("[Stack Pop] Value popped from stack");
    return value;
}

T81Number peek81(void) {
    if (t81_sp < 0) {
        fprintf(stderr, "[T81] Stack empty (peek)\n");
        axion_log("[T81 Error] Attempted peek on empty stack");
        exit(STACK_UNDERFLOW_ERR);
    }
    return t81_stack[t81_sp];
}
@#

@* T81 Arithmetic Extensions@<=
void add81(void) {
    T81Number a = pop81();
    T81Number b = pop81();
    T81Number result = a + b;
    push81(result);
    axion_log("[T81 Arithmetic] add81: %s + %s = %s", a.to_string().c_str(), b.to_string().c_str(), result.to_string().c_str());
}

void mod81(void) {
    T81Number a = pop81();
    T81Number b = pop81();
    if (b == T81Number::zero()) {
        fprintf(stderr, "[T81] mod81: Division by zero!\n");
        axion_log("[T81 Error] mod81: Division by zero");
        exit(1);
    }
    T81Number result = T81Number::from_digits({T81Digit(a.to_u64() % b.to_u64())}, false);
    push81(result);
    axion_log("[T81 Arithmetic] mod81 result pushed");
}

void neg81(void) {
    T81Number a = pop81();
    T81Number result = -a;
    push81(result);
    axion_log("[T81 Arithmetic] neg81: result pushed");
}

bool ifz81(void) {
    T81Number a = peek81();
    bool zero = (a == T81Number::zero());
    axion_log("[T81 Conditional] ifz81: %s", zero ? "TRUE" : "FALSE");
    return zero;
}
@#

@* T81 Stack Control Operations@<=
void dup81(void) {
    T81Number val = peek81();
    push81(val);
    axion_log("[T81 Stack Control] dup81 executed");
}

void swap81(void) {
    if (t81_sp < 1) {
        fprintf(stderr, "[T81] swap81: Not enough elements\n");
        axion_log("[T81 Error] swap81: Not enough elements");
        exit(1);
    }
    T81Number a = pop81();
    T81Number b = pop81();
    push81(a);
    push81(b);
    axion_log("[T81 Stack Control] swap81 executed");
}

void drop81(void) {
    if (t81_sp < 0) {
        fprintf(stderr, "[T81] drop81: Stack empty\n");
        axion_log("[T81 Error] drop81: Stack empty");
        exit(1);
    }
    T81Number val = pop81();
    axion_log("[T81 Stack Control] drop81 executed");
}
@#

@* External Header Interface@h
@<T81 Stack API Declarations@>
@#

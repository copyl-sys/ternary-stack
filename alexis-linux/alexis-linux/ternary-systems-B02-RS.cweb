/*=====================================================================
 Ternary Systems B02-RS: Cross-Platform Unified Ternary System in Rust
 Comprehensive Refactoring with Detailed Comments
----------------------------------------------------------------------
 This Rust program reimplements a ternary computing system. It includes:
 - Ternary arithmetic expression evaluation,
 - A Tower of Hanoi solver,
 - Matrix operations with ternary representation for serialization,
 - Discrete math-enhanced opcode encoding and validation.
 The application is designed for safety and portability, using Rust's safety
 features and idiomatic constructs.
=====================================================================*/

/*=====================================================================
 Rust Main Module: main.rs
 This file contains the entire implementation of the ternary system in Rust.
 Each major component is well-commented to clarify functionality and design.
=====================================================================*/
@* Rust Main Module: main.rs
@o main.rs
@c
// Import necessary modules from Rust's standard library.
use std::fs::File;
use std::io::{self, BufRead, BufReader, Write};
use std::env;
use std::process;

/// Enum representing errors that can occur while parsing ternary arithmetic expressions.
#[derive(Debug)]
enum ParseError {
    /// Error for an invalid digit that is not 0, 1, or 2.
    InvalidDigit(char),
    /// Error for encountering an unexpected character in the expression.
    UnexpectedChar(char),
    /// Error when a closing parenthesis is missing.
    MissingClosingParen,
    /// Error for division by zero.
    DivisionByZero,
    /// Error for an empty expression.
    EmptyExpression,
}

// Implement Display trait for ParseError to provide user-friendly error messages.
impl std::fmt::Display for ParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            ParseError::InvalidDigit(c) => write!(f, "Invalid digit '{}': expected 0, 1, or 2", c),
            ParseError::UnexpectedChar(c) => write!(f, "Unexpected character '{}'", c),
            ParseError::MissingClosingParen => write!(f, "Missing closing parenthesis"),
            ParseError::DivisionByZero => write!(f, "Division by zero"),
            ParseError::EmptyExpression => write!(f, "Expression is empty"),
        }
    }
}

/// Struct representing a matrix, tailored for ternary operations.
#[derive(Debug)]
struct TMatrix {
    rows: usize,        // Number of rows in the matrix.
    cols: usize,        // Number of columns in the matrix.
    data: Vec<Vec<i32>>, // 2D vector storing matrix elements.
}

impl TMatrix {
    /// Creates a new matrix with specified rows and columns, initializing all elements to zero.
    fn new(rows: usize, cols: usize) -> TMatrix {
        let data = vec![vec![0; cols]; rows];
        TMatrix { rows, cols, data }
    }

    /// Adds two matrices. Returns a new matrix if dimensions match, else an error message.
    fn add(&self, other: &TMatrix) -> Result<TMatrix, String> {
        // Check if both matrices have the same dimensions.
        if self.rows != other.rows || self.cols != other.cols {
            return Err("Matrix dimensions mismatch for addition".to_string());
        }
        // Initialize a result matrix with the same dimensions.
        let mut result = TMatrix::new(self.rows, self.cols);
        // Iterate over each element and add corresponding elements.
        for i in 0..self.rows {
            for j in 0..self.cols {
                result.data[i][j] = self.data[i][j] + other.data[i][j];
            }
        }
        Ok(result)
    }

    /// Multiplies two matrices. Returns a new matrix if the number of columns of self equals the number of rows of other.
    fn multiply(&self, other: &TMatrix) -> Result<TMatrix, String> {
        // Validate dimensions for matrix multiplication.
        if self.cols != other.rows {
            return Err("Matrix dimensions mismatch for multiplication".to_string());
        }
        // Initialize result matrix with dimensions: self.rows x other.cols.
        let mut result = TMatrix::new(self.rows, other.cols);
        // Perform matrix multiplication.
        for i in 0..self.rows {
            for j in 0..other.cols {
                let mut sum = 0;
                for k in 0..self.cols {
                    sum += self.data[i][k] * other.data[k][j];
                }
                result.data[i][j] = sum;
            }
        }
        Ok(result)
    }

    /// Serializes the matrix to a file using ternary representation.
    /// The file starts with the dimensions followed by the matrix data.
    fn serialize(&self, filename: &str) -> io::Result<()> {
        let mut file = File::create(filename)?;
        // Write dimensions (rows and columns) to the file.
        writeln!(file, "{} {}", self.rows, self.cols)?;
        // Write each element in its ternary form.
        for i in 0..self.rows {
            for j in 0..self.cols {
                let ternary = int_to_ternary(self.data[i][j]);
                write!(file, "{} ", ternary)?;
            }
            writeln!(file)?;
        }
        Ok(())
    }

    /// Deserializes a matrix from a file.
    /// Expects the first line to contain the dimensions followed by rows of ternary-encoded data.
    fn deserialize(filename: &str) -> io::Result<TMatrix> {
        let file = File::open(filename)?;
        let reader = BufReader::new(file);
        let mut lines = reader.lines();

        // Read the first line to obtain matrix dimensions.
        let first_line = lines.next().ok_or_else(|| io::Error::new(io::ErrorKind::InvalidData, "Empty file"))??;
        let dims: Vec<usize> = first_line.split_whitespace()
            .map(|s| s.parse().map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e)))
            .collect::<Result<_, _>>()?;
        if dims.len() != 2 {
            return Err(io::Error::new(io::ErrorKind::InvalidData, "Invalid dimensions"));
        }
        let rows = dims[0];
        let cols = dims[1];

        // Read matrix data for each row.
        let mut data = Vec::with_capacity(rows);
        for line in lines.take(rows) {
            let line = line?;
            let row: Vec<i32> = line.split_whitespace()
                .map(|s| parse_ternary(s).map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e.to_string())))
                .collect::<Result<_, _>>()?;
            if row.len() != cols {
                return Err(io::Error::new(io::ErrorKind::InvalidData, "Row length mismatch"));
            }
            data.push(row);
        }
        if data.len() != rows {
            return Err(io::Error::new(io::ErrorKind::InvalidData, "Insufficient rows"));
        }

        Ok(TMatrix { rows, cols, data })
    }
}

/// Evaluates a ternary arithmetic expression provided as a string.
/// Returns the evaluated integer result or a ParseError if the expression is invalid.
fn tritjs_eval_expression(expr: &str) -> Result<i32, ParseError> {
    let expr = expr.trim();
    if expr.is_empty() {
        return Err(ParseError::EmptyExpression);
    }
    let chars: Vec<char> = expr.chars().collect();
    let mut pos = 0;
    // Start parsing the expression from the beginning.
    let result = parse_expr(&chars, &mut pos)?;
    // Ensure no unexpected characters remain.
    while pos < chars.len() {
        if !chars[pos].is_whitespace() {
            return Err(ParseError::UnexpectedChar(chars[pos]));
        }
        pos += 1;
    }
    Ok(result)
}

/// Parses an expression with addition and subtraction operations.
/// Recursively calls term parsing and applies operations sequentially.
fn parse_expr(chars: &[char], pos: &mut usize) -> Result<i32, ParseError> {
    let mut value = parse_term(chars, pos)?;
    // Continue parsing as long as there are '+' or '-' operators.
    while *pos < chars.len() {
        skip_whitespace(chars, pos);
        match chars.get(*pos) {
            Some('+') => {
                *pos += 1;
                value += parse_term(chars, pos)?;
            }
            Some('-') => {
                *pos += 1;
                value -= parse_term(chars, pos)?;
            }
            _ => break,
        }
    }
    Ok(value)
}

/// Parses a term with multiplication and division operations.
/// Uses factor parsing and applies '*' or '/' as they appear.
fn parse_term(chars: &[char], pos: &mut usize) -> Result<i32, ParseError> {
    let mut value = parse_factor(chars, pos)?;
    // Loop to process multiplication and division.
    while *pos < chars.len() {
        skip_whitespace(chars, pos);
        match chars.get(*pos) {
            Some('*') => {
                *pos += 1;
                value *= parse_factor(chars, pos)?;
            }
            Some('/') => {
                *pos += 1;
                let next = parse_factor(chars, pos)?;
                if next == 0 {
                    return Err(ParseError::DivisionByZero);
                }
                value /= next;
            }
            _ => break,
        }
    }
    Ok(value)
}

/// Parses a factor which can be a number or a parenthesized expression.
fn parse_factor(chars: &[char], pos: &mut usize) -> Result<i32, ParseError> {
    skip_whitespace(chars, pos);
    if *pos >= chars.len() {
        return Err(ParseError::UnexpectedChar('\0'));
    }
    // If the current character is an opening parenthesis, parse the enclosed expression.
    if chars[*pos] == '(' {
        *pos += 1; // Consume '('
        let value = parse_expr(chars, pos)?;
        skip_whitespace(chars, pos);
        // Expect a closing parenthesis.
        if *pos >= chars.len() || chars[*pos] != ')' {
            return Err(ParseError::MissingClosingParen);
        }
        *pos += 1; // Consume ')'
        Ok(value)
    } else {
        // Otherwise, parse a number in ternary format.
        parse_number(chars, pos)
    }
}

/// Parses a number represented in ternary (base 3).
/// Accumulates digits and converts them to an integer value.
fn parse_number(chars: &[char], pos: &mut usize) -> Result<i32, ParseError> {
    skip_whitespace(chars, pos);
    if *pos >= chars.len() {
        return Err(ParseError::UnexpectedChar('\0'));
    }
    let mut value = 0;
    let mut has_digits = false;
    // Process consecutive characters that are valid ternary digits.
    while *pos < chars.len() {
        let c = chars[*pos];
        if c >= '0' && c <= '2' {
            value = value * 3 + (c as i32 - '0' as i32);
            has_digits = true;
            *pos += 1;
        } else {
            break;
        }
    }
    // If no valid digits were found, return an error.
    if !has_digits {
        return Err(ParseError::InvalidDigit(chars[*pos]));
    }
    Ok(value)
}

/// Skips over whitespace characters to help parsing functions align at the next meaningful token.
fn skip_whitespace(chars: &[char], pos: &mut usize) {
    while *pos < chars.len() && chars[*pos].is_whitespace() {
        *pos += 1;
    }
}

/// Converts an integer to its ternary (base 3) string representation.
/// Handles negative numbers by prefixing with a minus sign.
fn int_to_ternary(n: i32) -> String {
    if n == 0 {
        return "0".to_string();
    }
    let mut digits = Vec::new();
    let mut num = n.abs();
    // Extract digits in base 3.
    while num > 0 {
        digits.push((num % 3) as u8 + b'0');
        num /= 3;
    }
    // Append negative sign if necessary.
    if n < 0 {
        digits.push(b'-');
    }
    // Reverse digits to form the correct number and convert to string.
    String::from_utf8(digits.into_iter().rev().collect()).unwrap()
}

/// Parses a ternary string back into an integer value.
/// Recognizes an optional leading negative sign.
fn parse_ternary(s: &str) -> Result<i32, ParseError> {
    let mut value = 0;
    let mut is_negative = false;
    let chars: Vec<char> = s.chars().collect();
    let mut i = 0;

    if chars.is_empty() {
        return Err(ParseError::EmptyExpression);
    }
    // Check for negative sign.
    if chars[0] == '-' {
        is_negative = true;
        i += 1;
    }

    // Convert each ternary digit to its integer value.
    while i < chars.len() {
        let c = chars[i];
        if c < '0' || c > '2' {
            return Err(ParseError::InvalidDigit(c));
        }
        value = value * 3 + (c as i32 - '0' as i32);
        i += 1;
    }
    Ok(if is_negative { -value } else { value })
}

/// Solves the Tower of Hanoi problem for n disks.
/// Displays the initial state and then the moves.
fn solve_hanoi(n: i32) {
    // Initialize state vector where each index represents a disk and its value represents the peg it is on.
    let mut state: Vec<i32> = vec![0; n as usize];
    println!("Initial state (all disks on peg 0):");
    print_state(&state);
    // Start the recursive solution.
    solve_hanoi_recursive(n, 0, 2, 1, &mut state);
}

/// Recursive function to solve Tower of Hanoi.
/// Moves n disks from the 'from' peg to the 'to' peg using 'aux' as auxiliary.
fn solve_hanoi_recursive(n: i32, from: i32, to: i32, aux: i32, state: &mut Vec<i32>) {
    if n == 0 {
        return;
    }
    // Move n-1 disks from 'from' peg to 'aux' peg.
    solve_hanoi_recursive(n - 1, from, aux, to, state);
    // Move the nth disk from 'from' peg to 'to' peg.
    hanoi_move(n - 1, from, to, state);
    // Move the n-1 disks from 'aux' peg to 'to' peg.
    solve_hanoi_recursive(n - 1, aux, to, from, state);
}

/// Moves a disk in the Tower of Hanoi problem and prints the move and state.
fn hanoi_move(disk: i32, from: i32, to: i32, state: &mut Vec<i32>) {
    println!("Move disk {} from peg {} to peg {}", disk, from, to);
    state[disk as usize] = to; // Update state to reflect the move.
    print_state(state);
}

/// Prints the current state of the Tower of Hanoi.
/// The state vector is printed in reverse order to display largest disk first.
fn print_state(state: &[i32]) {
    print!("State: ");
    for &peg in state.iter().rev() {
        print!("{}", peg);
    }
    println!();
}

/// Encodes an opcode using ternary representation and appends a checksum.
/// The checksum is computed as the sum of the digits modulo 3.
fn discrete_opcode_encode(opcode: i32) -> String {
    let ternary = int_to_ternary(opcode);
    // Compute the checksum by summing all valid ternary digits.
    let checksum = ternary.chars()
        .filter(|&c| c >= '0' && c <= '2')
        .map(|c| (c as u32 - '0' as u32) as i32)
        .sum::<i32>() % 3;
    format!("{}{}", ternary, checksum)
}

/// Validates an encoded opcode by verifying its checksum.
/// Returns true if the checksum matches, false otherwise.
fn discrete_opcode_validate(encoded: &str) -> bool {
    if encoded.len() < 2 {
        return false;
    }
    // Split the encoded string into the code part and the checksum digit.
    let (code, checksum) = encoded.split_at(encoded.len() - 1);
    let checksum_digit = checksum.chars().next().unwrap();
    if checksum_digit < '0' || checksum_digit > '2' {
        return false;
    }
    // Compute the checksum from the code part.
    let computed_sum = code.chars()
        .filter(|&c| c >= '0' && c <= '2')
        .map(|c| (c as u32 - '0' as u32) as i32)
        .sum::<i32>() % 3;
    computed_sum == (checksum_digit as u32 - '0' as u32) as i32
}

/// Displays help instructions for using the ternary system utility.
fn print_help() {
    println!("Ternary Systems B02-RS Utility (Rust Version)");
    println!("=================================================");
    println!("Usage:");
    println!(" ternary_system -expr \"expression\"");
    println!(" ternary_system -hanoi n");
    println!(" ternary_system -opcode number");
    println!(" ternary_system interactive");
    println!("=================================================");
}

/// Handles interactive mode, allowing the user to input commands at runtime.
/// Commands include evaluation of expressions, solving Hanoi, and opcode encoding.
fn interactive_mode() {
    let stdin = io::stdin();
    println!("Entering interactive mode. Type 'help' for commands, 'exit' to quit.");
    loop {
        // Prompt the user.
        print!("ts> ");
        io::stdout().flush().unwrap();
        let mut line = String::new();
        // Read user input.
        stdin.read_line(&mut line).unwrap();
        let line = line.trim();
        if line.is_empty() {
            continue;
        }
        // Tokenize the input command.
        let tokens: Vec<&str> = line.splitn(2, ' ').collect();
        match tokens[0] {
            "exit" => {
                println!("Exiting interactive mode.");
                break;
            }
            "help" => print_help(),
            "expr" => {
                if tokens.len() > 1 {
                    // Evaluate the provided ternary expression.
                    match tritjs_eval_expression(tokens[1]) {
                        Ok(result) => println!("Expression evaluated to (ternary): {}", int_to_ternary(result)),
                        Err(e) => println!("Error: {}", e),
                    }
                } else {
                    println!("Usage: expr <expression>");
                }
            }
            "hanoi" => {
                if tokens.len() > 1 {
                    // Parse the number of disks and solve the Tower of Hanoi.
                    if let Ok(n) = tokens[1].parse::<i32>() {
                        if n >= 0 {
                            solve_hanoi(n);
                        } else {
                            println!("Number of disks must be non-negative");
                        }
                    } else {
                        println!("Invalid number for hanoi");
                    }
                } else {
                    println!("Usage: hanoi <number>");
                }
            }
            "opcode" => {
                if tokens.len() > 1 {
                    // Parse the opcode and encode it with a checksum.
                    if let Ok(opcode) = tokens[1].parse::<i32>() {
                        let encoded = discrete_opcode_encode(opcode);
                        println!("Opcode {} encoded as: {}", opcode, encoded);
                        println!("Encoded opcode is {}", if discrete_opcode_validate(&encoded) { "valid" } else { "invalid" });
                    } else {
                        println!("Invalid opcode");
                    }
                } else {
                    println!("Usage: opcode <number>");
                }
            }
            _ => println!("Unknown command. Type 'help' for available commands."),
        }
    }
}

/// The main entry point of the application.
/// Parses command-line arguments and routes to appropriate functionality (interactive mode,
/// expression evaluation, Hanoi solver, or opcode encoding).
fn main() {
    // Collect command-line arguments.
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 || args[1] == "interactive" {
        // If no arguments or "interactive" is specified, start interactive mode.
        interactive_mode();
    } else if args[1] == "-expr" && args.len() > 2 {
        // Evaluate a ternary arithmetic expression provided via command line.
        match tritjs_eval_expression(&args[2]) {
            Ok(result) => println!("Expression evaluated to (ternary): {}", int_to_ternary(result)),
            Err(e) => {
                println!("Error: {}", e);
                process::exit(1);
            }
        }
    } else if args[1] == "-hanoi" && args.len() > 2 {
        // Solve the Tower of Hanoi for a given number of disks.
        match args[2].parse::<i32>() {
            Ok(n) if n >= 0 => solve_hanoi(n),
            Ok(_) => {
                println!("Number of disks must be non-negative");
                process::exit(1);
            }
            Err(_) => {
                println!("Invalid number for hanoi");
                process::exit(1);
            }
        }
    } else if args[1] == "-opcode" && args.len() > 2 {
        // Encode and validate an opcode provided as a number.
        match args[2].parse::<i32>() {
            Ok(opcode) => {
                let encoded = discrete_opcode_encode(opcode);
                println!("Opcode {} encoded as: {}", opcode, encoded);
                println!("Encoded opcode is {}", if discrete_opcode_validate(&encoded) { "valid" } else { "invalid" });
            }
            Err(_) => {
                println!("Invalid opcode");
                process::exit(1);
            }
        }
    } else {
        // If arguments do not match any known command, display help.
        print_help();
        process::exit(1);
    }
}
@*/

/*=====================================================================
 End of Ternary Systems B02-RS CWEB Document (Refactored with Comprehensive Comments)
=====================================================================*/

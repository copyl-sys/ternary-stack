/*=====================================================================
  Ternary Systems B02_py: Cross-Platform Unified Ternary System
  Version: B02-PY
  Author: Copyleft Systems
  Date: Mar 3 2025

  OVERVIEW:
  This literate program is an evolution of the earlier B01-PY version.
  It integrates core ternary computing functions with an emphasis on
  portability. The document produces four artifacts:
    1. ternary_system.h      - A portable core header file.
    2. ternary_system.c      - The core library implementation.
    3. ternary_system_kernel.c - A Linux–specific kernel module (optional).
    4. ternary_system_util.py  - A Python utility with dynamic, cross–platform
                                 shared library loading.

  DESIGN & PROFILING:
  - The system supports ternary arithmetic expression parsing, a recursive
    descent parser that processes expressions (digits 0–2) with operations
    (+, -, *, /) in O(n) time.
  - The Tower of Hanoi solver uses a recursive algorithm with exponential
    complexity; it is demonstrated with a 3–disk puzzle.
  - Matrix operations include creation, addition, multiplication, and file I/O
    using standard C routines.
  - Opcode encoding uses ternary representation with a mod–3 checksum.
  - Portability is achieved through abstracted macros (TS_MALLOC, TS_FREE, TS_PRINT)
    and TS_PUBLIC for shared library exports. This allows the code to be compiled
    and run on Linux, Windows, macOS, BSD, and other UNIX–like systems.
  - A Linux kernel module is included as an optional artifact (wrapped in __KERNEL__),
    while the Python utility provides a user–space interface with dynamic OS detection.

  This document has been refactored to incorporate detailed profiling,
  design rationale, and improved documentation to aid both development and education.
=====================================================================*/

/*=====================================================================
  1. Core Header File: ternary_system.h
  PURPOSE:
    Provides the public interface for the ternary system and abstracts
    platform-specific functionality via portable macros and symbol
    visibility control.
  KEY COMPONENTS:
    - Ternary arithmetic (tritjs_eval_expression, int_to_ternary)
    - Tower of Hanoi solver (solve_hanoi)
    - Matrix operations (TMatrix, TMAT_ADD, TMAT_MUL, serialization)
    - Opcode functions (discrete_opcode_encode, discrete_opcode_validate)
  PORTABILITY:
    TS_MALLOC/TS_FREE/TS_PRINT select kernel vs. user–space functions.
    TS_PUBLIC manages shared library exports across Windows, macOS, UNIX.
=====================================================================*/
@* Core Header File: ternary_system.h
@o ternary_system.h
@c
#ifndef TERNARY_SYSTEM_H
#define TERNARY_SYSTEM_H

#ifdef __KERNEL__
  #include <linux/types.h>
  #include <linux/slab.h>
  #define TS_MALLOC(sz) kmalloc((sz), GFP_KERNEL)
  #define TS_FREE(ptr) kfree(ptr)
  #define TS_PRINT(fmt, ...) printk(KERN_INFO fmt, ##__VA_ARGS__)
  #define TS_PUBLIC
#else
  #include <stdio.h>
  #include <stdlib.h>
  #include <ctype.h>
  #include <string.h>
  #define TS_MALLOC(sz) malloc(sz)
  #define TS_FREE(ptr) free(ptr)
  #define TS_PRINT(fmt, ...) printf(fmt, ##__VA_ARGS__)
  #if defined(_WIN32) || defined(__CYGWIN__)
    #ifdef BUILDING_DLL
      #ifdef __GNUC__
        #define TS_PUBLIC __attribute__((dllexport))
      #else
        #define TS_PUBLIC __declspec(dllexport)
      #endif
    #else
      #ifdef __GNUC__
        #define TS_PUBLIC __attribute__((dllimport))
      #else
        #define TS_PUBLIC __declspec(dllimport)
      #endif
    #endif
  #elif defined(__GNUC__) && __GNUC__ >= 4
    #define TS_PUBLIC __attribute__((visibility("default")))
  #else
    #define TS_PUBLIC
  #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

TS_PUBLIC int tritjs_eval_expression(const char *expr);
TS_PUBLIC void int_to_ternary(int n, char *buffer);

TS_PUBLIC void solve_hanoi(int n);

typedef struct TMatrix {
    int rows;
    int cols;
    int **data;
} TMatrix;

TS_PUBLIC TMatrix *create_matrix(int rows, int cols);
TS_PUBLIC void free_matrix(TMatrix *m);
TS_PUBLIC TMatrix *TMAT_ADD(TMatrix *A, TMatrix *B);
TS_PUBLIC TMatrix *TMAT_MUL(TMatrix *A, TMatrix *B);
TS_PUBLIC void serialize_matrix(TMatrix *m, const char *filename);
TS_PUBLIC TMatrix *deserialize_matrix(const char *filename);

TS_PUBLIC void discrete_opcode_encode(int opcode, char *encoded_buffer);
TS_PUBLIC int discrete_opcode_validate(const char *encoded_opcode);

#ifdef __cplusplus
}
#endif

#endif /* TERNARY_SYSTEM_H */
@*/

/*=====================================================================
  2. Core Implementation: ternary_system.c
  FUNCTIONALITY:
    Implements the core functions including:
      - A recursive descent parser for ternary arithmetic expressions.
      - A Tower of Hanoi solver (recursive, prints each move).
      - Matrix operations: creation, addition, multiplication, and file I/O.
      - Discrete math–enhanced opcode encoding and validation.
  DESIGN NOTES:
    - Error handling is context–sensitive (kernel logs vs. user exit).
    - All memory and I/O operations use portable TS_* macros.
    - The parser processes only ternary digits (0,1,2) and ensures proper error checking.
=====================================================================*/
@* Core Implementation: ternary_system.c
@o ternary_system.c
@c
#include "ternary_system.h"

static const char *expr_ptr;

void error(const char *msg) {
#ifdef __KERNEL__
    TS_PRINT("Error: %s\n", msg);
#else
    fprintf(stderr, "Error: %s\n", msg);
    exit(1);
#endif
}

static int parse_expr(void);
static int parse_term(void);
static int parse_factor(void);

static int parse_number(void) {
    int value = 0;
    if (!(*expr_ptr >= '0' && *expr_ptr <= '2'))
        error("Expected a digit (0, 1, or 2)");
    while (*expr_ptr && (*expr_ptr == '0' || *expr_ptr == '1' || *expr_ptr == '2')) {
        value = value * 3 + (*expr_ptr - '0');
        expr_ptr++;
    }
    return value;
}

static int parse_factor(void) {
    while (*expr_ptr && isspace(*expr_ptr)) expr_ptr++;
    if (*expr_ptr == '(') {
        expr_ptr++;
        int value = parse_expr();
        if (*expr_ptr != ')')
            error("Expected ')'");
        expr_ptr++;
        return value;
    }
    return parse_number();
}

static int parse_term(void) {
    int value = parse_factor();
    while (*expr_ptr) {
        while (*expr_ptr && isspace(*expr_ptr)) expr_ptr++;
        if (*expr_ptr == '*' || *expr_ptr == '/') {
            char op = *expr_ptr;
            expr_ptr++;
            int next_val = parse_factor();
            if (op == '*')
                value *= next_val;
            else {
                if (next_val == 0)
                    error("Division by zero");
                value /= next_val;
            }
        } else {
            break;
        }
    }
    return value;
}

static int parse_expr(void) {
    int value = parse_term();
    while (*expr_ptr) {
        while (*expr_ptr && isspace(*expr_ptr)) expr_ptr++;
        if (*expr_ptr == '+' || *expr_ptr == '-') {
            char op = *expr_ptr;
            expr_ptr++;
            int next_val = parse_term();
            if (op == '+')
                value += next_val;
            else
                value -= next_val;
        } else {
            break;
        }
    }
    return value;
}

int tritjs_eval_expression(const char *expr) {
    expr_ptr = expr;
    int result = parse_expr();
    while (*expr_ptr) {
        if (!isspace(*expr_ptr))
            error("Unexpected character in expression");
        expr_ptr++;
    }
    return result;
}

void int_to_ternary(int n, char *buffer) {
    char temp[64];
    int i = 0;
    if (n == 0) {
        strcpy(buffer, "0");
        return;
    }
    int negative = (n < 0);
    if (negative) n = -n;
    while (n > 0) {
        temp[i++] = '0' + (n % 3);
        n /= 3;
    }
    if (negative) temp[i++] = '-';
    temp[i] = '\0';
    int len = strlen(temp);
    for (int j = 0; j < len; j++)
        buffer[j] = temp[len - j - 1];
    buffer[len] = '\0';
}

/* Tower of Hanoi Solver Implementation */
void print_state(int *state, int n) {
    TS_PRINT("State: ");
    for (int i = n - 1; i >= 0; i--) {
        TS_PRINT("%d", state[i]);
    }
    TS_PRINT("\n");
}

static void hanoi_move(int disk, int from, int to, int *state) {
    TS_PRINT("Move disk %d from peg %d to peg %d\n", disk, from, to);
    state[disk] = to;
    print_state(state, disk + 1);
}

static void solve_hanoi_recursive(int n, int from, int to, int aux, int *state) {
    if (n == 0) return;
    solve_hanoi_recursive(n - 1, from, aux, to, state);
    hanoi_move(n - 1, from, to, state);
    solve_hanoi_recursive(n - 1, aux, to, from, state);
}

void solve_hanoi(int n) {
    int *state = (int *)TS_MALLOC(n * sizeof(int));
    if (!state) error("Memory allocation failed for Hanoi state");
    for (int i = 0; i < n; i++) state[i] = 0;
    TS_PRINT("Initial state (all disks on peg 0):\n");
    print_state(state, n);
    solve_hanoi_recursive(n, 0, 2, 1, state);
    TS_FREE(state);
}

/* Matrix Operations Implementation */
TMatrix *create_matrix(int rows, int cols) {
    TMatrix *m = (TMatrix *)TS_MALLOC(sizeof(TMatrix));
    if (!m) error("Memory allocation failed for matrix structure");
    m->rows = rows;
    m->cols = cols;
    m->data = (int **)TS_MALLOC(rows * sizeof(int *));
    if (!m->data) error("Memory allocation failed for matrix data");
    for (int i = 0; i < rows; i++) {
        m->data[i] = (int *)TS_MALLOC(cols * sizeof(int));
        if (!m->data[i]) error("Memory allocation failed for matrix row");
        for (int j = 0; j < cols; j++)
            m->data[i][j] = 0;
    }
    return m;
}

void free_matrix(TMatrix *m) {
    if (m) {
        for (int i = 0; i < m->rows; i++)
            TS_FREE(m->data[i]);
        TS_FREE(m->data);
        TS_FREE(m);
    }
}

TMatrix *TMAT_ADD(TMatrix *A, TMatrix *B) {
    if (A->rows != B->rows || A->cols != B->cols)
        error("Matrix dimensions mismatch for addition");
    TMatrix *result = create_matrix(A->rows, A->cols);
    for (int i = 0; i < A->rows; i++) {
        for (int j = 0; j < A->cols; j++)
            result->data[i][j] = A->data[i][j] + B->data[i][j];
    }
    return result;
}

TMatrix *TMAT_MUL(TMatrix *A, TMatrix *B) {
    if (A->cols != B->rows)
        error("Matrix dimensions mismatch for multiplication");
    TMatrix *result = create_matrix(A->rows, B->cols);
    for (int i = 0; i < A->rows; i++) {
        for (int j = 0; j < B->cols; j++) {
            int sum = 0;
            for (int k = 0; k < A->cols; k++)
                sum += A->data[i][k] * B->data[k][j];
            result->data[i][j] = sum;
        }
    }
    return result;
}

static void int_to_ternary_internal(int n, char *buffer) {
    char temp[64];
    int i = 0;
    if (n == 0) {
        strcpy(buffer, "0");
        return;
    }
    int negative = (n < 0);
    if (negative) n = -n;
    while (n > 0) {
        temp[i++] = '0' + (n % 3);
        n /= 3;
    }
    if (negative) temp[i++] = '-';
    temp[i] = '\0';
    int len = strlen(temp);
    for (int j = 0; j < len; j++)
        buffer[j] = temp[len - j - 1];
    buffer[len] = '\0';
}

void serialize_matrix(TMatrix *m, const char *filename) {
    FILE *fp = fopen(filename, "w");
    if (!fp) error("Failed to open file for matrix serialization");
    fprintf(fp, "%d %d\n", m->rows, m->cols);
    char buffer[64];
    for (int i = 0; i < m->rows; i++) {
        for (int j = 0; j < m->cols; j++) {
            int_to_ternary_internal(m->data[i][j], buffer);
            fprintf(fp, "%s ", buffer);
        }
        fprintf(fp, "\n");
    }
    fclose(fp);
}

TMatrix *deserialize_matrix(const char *filename) {
    FILE *fp = fopen(filename, "r");
    if (!fp) error("Failed to open file for matrix deserialization");
    int rows, cols;
    if (fscanf(fp, "%d %d", &rows, &cols) != 2)
        error("Failed to read matrix dimensions");
    TMatrix *m = create_matrix(rows, cols);
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            char buf[64];
            if (fscanf(fp, "%63s", buf) != 1)
                error("Failed to read matrix element");
            int value = 0;
            char *p = buf;
            int is_negative = 0;
            if (*p == '-') { is_negative = 1; p++; }
            while (*p) {
                if (*p < '0' || *p > '2')
                    error("Invalid digit in ternary number");
                value = value * 3 + (*p - '0');
                p++;
            }
            if (is_negative) value = -value;
            m->data[i][j] = value;
        }
    }
    fclose(fp);
    return m;
}

/* Opcode Functions Implementation */
void discrete_opcode_encode(int opcode, char *encoded_buffer) {
    char temp[64];
    int_to_ternary(opcode, temp);
    int checksum = 0;
    for (int i = 0; temp[i] != '\0'; i++) {
        if (temp[i] >= '0' && temp[i] <= '2')
            checksum += (temp[i] - '0');
    }
    checksum %= 3;
    sprintf(encoded_buffer, "%s%c", temp, '0' + checksum);
}

int discrete_opcode_validate(const char *encoded_opcode) {
    int len = strlen(encoded_opcode);
    if (len < 2) return 0;
    int computed_sum = 0;
    for (int i = 0; i < len - 1; i++) {
        if (encoded_opcode[i] < '0' || encoded_opcode[i] > '2')
            return 0;
        computed_sum += (encoded_opcode[i] - '0');
    }
    computed_sum %= 3;
    int provided_checksum = encoded_opcode[len - 1] - '0';
    return (computed_sum == provided_checksum);
}
@*/

/*=====================================================================
  3. Kernel Module: ternary_system_kernel.c
  PURPOSE:
    Demonstrates the usage of the core library within a Linux kernel module.
    NOTE: This module remains Linux–specific. On non–Linux systems, the core library
          should be used in user space.
  FUNCTIONALITY:
    - Evaluates a sample ternary expression.
    - Solves a 3–disk Tower of Hanoi puzzle.
    - Encodes and validates an opcode.
=====================================================================*/
@* Kernel Module Implementation: ternary_system_kernel.c
@o ternary_system_kernel.c
@c
#ifdef __KERNEL__
#include <linux/module.h>
#include <linux/init.h>
#include "ternary_system.h"

static int __init ternary_system_init(void) {
    TS_PRINT("Ternary System Kernel Module Loaded\n");

    {
        const char *expr = "12+21*(2-1)";
        int result = tritjs_eval_expression(expr);
        char buf[64];
        int_to_ternary(result, buf);
        TS_PRINT("Expression '%s' evaluated to: %s (ternary)\n", expr, buf);
    }

    {
        TS_PRINT("Solving Tower of Hanoi with 3 disks:\n");
        solve_hanoi(3);
    }

    {
        int opcode = 5;
        char encoded[64];
        discrete_opcode_encode(opcode, encoded);
        TS_PRINT("Opcode %d encoded as: %s\n", opcode, encoded);
        if (discrete_opcode_validate(encoded))
            TS_PRINT("Encoded opcode %s is valid.\n", encoded);
        else
            TS_PRINT("Encoded opcode %s is invalid.\n", encoded);
    }

    return 0;
}

static void __exit ternary_system_exit(void) {
    TS_PRINT("Ternary System Kernel Module Unloaded\n");
}

module_init(ternary_system_init);
module_exit(ternary_system_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Ternary System Kernel Module with Unified Ternary Logic, Portability Enhancements, and Robust Opcode Functions");
#endif
@*/

/*=====================================================================
  4. Python Utility Program: ternary_system_util.py
  PURPOSE:
    Provides a cross–platform user–space interface to the shared library via ctypes.
  FUNCTIONALITY:
    - Dynamically loads the appropriate shared library based on the OS.
    - Offers command–line and interactive modes for:
        * Evaluating ternary expressions.
        * Solving the Tower of Hanoi.
        * Demonstrating opcode encoding/validation.
  PORTABILITY:
    The script detects the OS (Windows, macOS, Linux/Unix) and loads the correct library file.
=====================================================================*/
@* Python Utility Program: ternary_system_util.py
@o ternary_system_util.py
@c
#!/usr/bin/env python3
import sys
import ctypes
import platform

# Dynamically determine the shared library name based on the OS.
if platform.system() == "Windows":
    lib_path = "./ternary_system.dll"
elif platform.system() == "Darwin":
    lib_path = "./libternary_system.dylib"
else:
    lib_path = "./libternary_system.so"
lib = ctypes.CDLL(lib_path)

lib.tritjs_eval_expression.argtypes = [ctypes.c_char_p]
lib.tritjs_eval_expression.restype = ctypes.c_int

lib.int_to_ternary.argtypes = [ctypes.c_int, ctypes.c_char_p]
lib.int_to_ternary.restype = None

lib.solve_hanoi.argtypes = [ctypes.c_int]
lib.solve_hanoi.restype = None

lib.discrete_opcode_encode.argtypes = [ctypes.c_int, ctypes.c_char_p]
lib.discrete_opcode_encode.restype = None

lib.discrete_opcode_validate.argtypes = [ctypes.c_char_p]
lib.discrete_opcode_validate.restype = ctypes.c_int

def evaluate_expression(expr):
    result = lib.tritjs_eval_expression(expr.encode('utf-8'))
    buffer = ctypes.create_string_buffer(64)
    lib.int_to_ternary(result, buffer)
    print("Expression evaluated to (ternary):", buffer.value.decode())

def solve_hanoi_wrapper(n):
    lib.solve_hanoi(n)

def opcode_demo(opcode):
    buffer = ctypes.create_string_buffer(64)
    lib.discrete_opcode_encode(opcode, buffer)
    encoded = buffer.value.decode()
    print(f"Opcode {opcode} encoded as: {encoded}")
    valid = lib.discrete_opcode_validate(buffer)
    if valid:
        print("Encoded opcode is valid.")
    else:
        print("Encoded opcode is invalid.")

def print_help():
    print("Ternary Systems B02_py Utility (Python Version)")
    print("=================================================")
    print("Usage:")
    print("  python ternary_system_util.py -expr 'expression'")
    print("  python ternary_system_util.py -hanoi n")
    print("  python ternary_system_util.py -opcode number")
    print("  python ternary_system_util.py interactive")
    print("=================================================")

def interactive_mode():
    print("Entering interactive mode. Type 'help' for commands, 'exit' to quit.")
    while True:
        line = input("ts> ")
        if line.strip() == "exit":
            print("Exiting interactive mode.")
            break
        elif line.strip() == "help":
            print_help()
        else:
            tokens = line.split()
            if not tokens: 
                continue
            cmd = tokens[0]
            if cmd == "expr":
                expr = line[5:].strip()
                evaluate_expression(expr)
            elif cmd == "hanoi":
                try:
                    n = int(tokens[1])
                    solve_hanoi_wrapper(n)
                except (IndexError, ValueError):
                    print("Usage: hanoi <number>")
            elif cmd == "opcode":
                try:
                    opcode = int(tokens[1])
                    opcode_demo(opcode)
                except (IndexError, ValueError):
                    print("Usage: opcode <number>")
            else:
                print("Unknown command. Type 'help' for available commands.")

def main():
    if len(sys.argv) < 2 or sys.argv[1] == "interactive":
        interactive_mode()
    elif sys.argv[1] == "-expr":
        if len(sys.argv) < 3:
            print("Usage: python ternary_system_util.py -expr 'expression'")
            sys.exit(1)
        evaluate_expression(sys.argv[2])
    elif sys.argv[1] == "-hanoi":
        if len(sys.argv) < 3:
            print("Usage: python ternary_system_util.py -hanoi <number>")
            sys.exit(1)
        try:
            n = int(sys.argv[2])
            solve_hanoi_wrapper(n)
        except ValueError:
            print("Invalid number for hanoi.")
    elif sys.argv[1] == "-opcode":
        if len(sys.argv) < 3:
            print("Usage: python ternary_system_util.py -opcode <number>")
            sys.exit(1)
        try:
            opcode = int(sys.argv[2])
            opcode_demo(opcode)
        except ValueError:
            print("Invalid opcode.")
    else:
        print_help()

if __name__ == "__main__":
    main()
@*/

/*=====================================================================
  CONCLUSION:
    Ternary Systems B02_py refines its predecessor by prioritizing 
    cross-platform compatibility, robust error handling, and clear documentation.
    Its design supports both kernel–mode (Linux) and user–space usage across multiple
    operating systems. The updated documentation and code profiling enhance the
    maintainability and educational value of the system.
=====================================================================*/
